// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nodeInterface.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_nodeInterface_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_nodeInterface_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_nodeInterface_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_nodeInterface_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_nodeInterface_2eproto;
namespace nodeInterface {
class Command;
struct CommandDefaultTypeInternal;
extern CommandDefaultTypeInternal _Command_default_instance_;
class MeshMsg;
struct MeshMsgDefaultTypeInternal;
extern MeshMsgDefaultTypeInternal _MeshMsg_default_instance_;
class MeshMsgs;
struct MeshMsgsDefaultTypeInternal;
extern MeshMsgsDefaultTypeInternal _MeshMsgs_default_instance_;
class NodeThreadMsg;
struct NodeThreadMsgDefaultTypeInternal;
extern NodeThreadMsgDefaultTypeInternal _NodeThreadMsg_default_instance_;
}  // namespace nodeInterface
PROTOBUF_NAMESPACE_OPEN
template<> ::nodeInterface::Command* Arena::CreateMaybeMessage<::nodeInterface::Command>(Arena*);
template<> ::nodeInterface::MeshMsg* Arena::CreateMaybeMessage<::nodeInterface::MeshMsg>(Arena*);
template<> ::nodeInterface::MeshMsgs* Arena::CreateMaybeMessage<::nodeInterface::MeshMsgs>(Arena*);
template<> ::nodeInterface::NodeThreadMsg* Arena::CreateMaybeMessage<::nodeInterface::NodeThreadMsg>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace nodeInterface {

enum NodeThreadMsg_NodeMsgType : int {
  NodeThreadMsg_NodeMsgType_NODE = 0,
  NodeThreadMsg_NodeMsgType_COMM = 1,
  NodeThreadMsg_NodeMsgType_NodeThreadMsg_NodeMsgType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  NodeThreadMsg_NodeMsgType_NodeThreadMsg_NodeMsgType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool NodeThreadMsg_NodeMsgType_IsValid(int value);
constexpr NodeThreadMsg_NodeMsgType NodeThreadMsg_NodeMsgType_NodeMsgType_MIN = NodeThreadMsg_NodeMsgType_NODE;
constexpr NodeThreadMsg_NodeMsgType NodeThreadMsg_NodeMsgType_NodeMsgType_MAX = NodeThreadMsg_NodeMsgType_COMM;
constexpr int NodeThreadMsg_NodeMsgType_NodeMsgType_ARRAYSIZE = NodeThreadMsg_NodeMsgType_NodeMsgType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NodeThreadMsg_NodeMsgType_descriptor();
template<typename T>
inline const std::string& NodeThreadMsg_NodeMsgType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, NodeThreadMsg_NodeMsgType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function NodeThreadMsg_NodeMsgType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    NodeThreadMsg_NodeMsgType_descriptor(), enum_t_value);
}
inline bool NodeThreadMsg_NodeMsgType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, NodeThreadMsg_NodeMsgType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<NodeThreadMsg_NodeMsgType>(
    NodeThreadMsg_NodeMsgType_descriptor(), name, value);
}
// ===================================================================

class Command final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nodeInterface.Command) */ {
 public:
  inline Command() : Command(nullptr) {}
  ~Command() override;
  explicit constexpr Command(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Command(const Command& from);
  Command(Command&& from) noexcept
    : Command() {
    *this = ::std::move(from);
  }

  inline Command& operator=(const Command& from) {
    CopyFrom(from);
    return *this;
  }
  inline Command& operator=(Command&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Command& default_instance() {
    return *internal_default_instance();
  }
  static inline const Command* internal_default_instance() {
    return reinterpret_cast<const Command*>(
               &_Command_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Command& a, Command& b) {
    a.Swap(&b);
  }
  inline void Swap(Command* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Command* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Command* New() const final {
    return new Command();
  }

  Command* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Command>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Command& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Command& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Command* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nodeInterface.Command";
  }
  protected:
  explicit Command(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgBytesFieldNumber = 2,
    kTxIntervalFieldNumber = 1,
    kCmdIdFieldNumber = 3,
    kDestIdFieldNumber = 4,
  };
  // bytes msgBytes = 2;
  void clear_msgbytes();
  const std::string& msgbytes() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msgbytes(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msgbytes();
  PROTOBUF_MUST_USE_RESULT std::string* release_msgbytes();
  void set_allocated_msgbytes(std::string* msgbytes);
  private:
  const std::string& _internal_msgbytes() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msgbytes(const std::string& value);
  std::string* _internal_mutable_msgbytes();
  public:

  // float txInterval = 1;
  void clear_txinterval();
  float txinterval() const;
  void set_txinterval(float value);
  private:
  float _internal_txinterval() const;
  void _internal_set_txinterval(float value);
  public:

  // uint32 cmdId = 3;
  void clear_cmdid();
  ::PROTOBUF_NAMESPACE_ID::uint32 cmdid() const;
  void set_cmdid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cmdid() const;
  void _internal_set_cmdid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 destId = 4;
  void clear_destid();
  ::PROTOBUF_NAMESPACE_ID::uint32 destid() const;
  void set_destid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_destid() const;
  void _internal_set_destid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:nodeInterface.Command)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msgbytes_;
  float txinterval_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cmdid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 destid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nodeInterface_2eproto;
};
// -------------------------------------------------------------------

class NodeThreadMsg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nodeInterface.NodeThreadMsg) */ {
 public:
  inline NodeThreadMsg() : NodeThreadMsg(nullptr) {}
  ~NodeThreadMsg() override;
  explicit constexpr NodeThreadMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NodeThreadMsg(const NodeThreadMsg& from);
  NodeThreadMsg(NodeThreadMsg&& from) noexcept
    : NodeThreadMsg() {
    *this = ::std::move(from);
  }

  inline NodeThreadMsg& operator=(const NodeThreadMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline NodeThreadMsg& operator=(NodeThreadMsg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NodeThreadMsg& default_instance() {
    return *internal_default_instance();
  }
  static inline const NodeThreadMsg* internal_default_instance() {
    return reinterpret_cast<const NodeThreadMsg*>(
               &_NodeThreadMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(NodeThreadMsg& a, NodeThreadMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(NodeThreadMsg* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NodeThreadMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NodeThreadMsg* New() const final {
    return new NodeThreadMsg();
  }

  NodeThreadMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NodeThreadMsg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NodeThreadMsg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const NodeThreadMsg& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodeThreadMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nodeInterface.NodeThreadMsg";
  }
  protected:
  explicit NodeThreadMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef NodeThreadMsg_NodeMsgType NodeMsgType;
  static constexpr NodeMsgType NODE =
    NodeThreadMsg_NodeMsgType_NODE;
  static constexpr NodeMsgType COMM =
    NodeThreadMsg_NodeMsgType_COMM;
  static inline bool NodeMsgType_IsValid(int value) {
    return NodeThreadMsg_NodeMsgType_IsValid(value);
  }
  static constexpr NodeMsgType NodeMsgType_MIN =
    NodeThreadMsg_NodeMsgType_NodeMsgType_MIN;
  static constexpr NodeMsgType NodeMsgType_MAX =
    NodeThreadMsg_NodeMsgType_NodeMsgType_MAX;
  static constexpr int NodeMsgType_ARRAYSIZE =
    NodeThreadMsg_NodeMsgType_NodeMsgType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  NodeMsgType_descriptor() {
    return NodeThreadMsg_NodeMsgType_descriptor();
  }
  template<typename T>
  static inline const std::string& NodeMsgType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, NodeMsgType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function NodeMsgType_Name.");
    return NodeThreadMsg_NodeMsgType_Name(enum_t_value);
  }
  static inline bool NodeMsgType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      NodeMsgType* value) {
    return NodeThreadMsg_NodeMsgType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kCmdsFieldNumber = 4,
    kLinkStatusFieldNumber = 5,
    kCmdRelayFieldNumber = 3,
    kRcvdBytesFieldNumber = 6,
    kDataBlockFieldNumber = 7,
    kTimestampFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // repeated .nodeInterface.Command cmds = 4;
  int cmds_size() const;
  private:
  int _internal_cmds_size() const;
  public:
  void clear_cmds();
  ::nodeInterface::Command* mutable_cmds(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nodeInterface::Command >*
      mutable_cmds();
  private:
  const ::nodeInterface::Command& _internal_cmds(int index) const;
  ::nodeInterface::Command* _internal_add_cmds();
  public:
  const ::nodeInterface::Command& cmds(int index) const;
  ::nodeInterface::Command* add_cmds();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nodeInterface::Command >&
      cmds() const;

  // repeated uint32 linkStatus = 5;
  int linkstatus_size() const;
  private:
  int _internal_linkstatus_size() const;
  public:
  void clear_linkstatus();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_linkstatus(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_linkstatus() const;
  void _internal_add_linkstatus(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_linkstatus();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 linkstatus(int index) const;
  void set_linkstatus(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_linkstatus(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      linkstatus() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_linkstatus();

  // bytes cmdRelay = 3;
  void clear_cmdrelay();
  const std::string& cmdrelay() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cmdrelay(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cmdrelay();
  PROTOBUF_MUST_USE_RESULT std::string* release_cmdrelay();
  void set_allocated_cmdrelay(std::string* cmdrelay);
  private:
  const std::string& _internal_cmdrelay() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cmdrelay(const std::string& value);
  std::string* _internal_mutable_cmdrelay();
  public:

  // bytes rcvdBytes = 6;
  void clear_rcvdbytes();
  const std::string& rcvdbytes() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_rcvdbytes(ArgT0&& arg0, ArgT... args);
  std::string* mutable_rcvdbytes();
  PROTOBUF_MUST_USE_RESULT std::string* release_rcvdbytes();
  void set_allocated_rcvdbytes(std::string* rcvdbytes);
  private:
  const std::string& _internal_rcvdbytes() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rcvdbytes(const std::string& value);
  std::string* _internal_mutable_rcvdbytes();
  public:

  // bytes dataBlock = 7;
  void clear_datablock();
  const std::string& datablock() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_datablock(ArgT0&& arg0, ArgT... args);
  std::string* mutable_datablock();
  PROTOBUF_MUST_USE_RESULT std::string* release_datablock();
  void set_allocated_datablock(std::string* datablock);
  private:
  const std::string& _internal_datablock() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_datablock(const std::string& value);
  std::string* _internal_mutable_datablock();
  public:

  // double timestamp = 2;
  void clear_timestamp();
  double timestamp() const;
  void set_timestamp(double value);
  private:
  double _internal_timestamp() const;
  void _internal_set_timestamp(double value);
  public:

  // .nodeInterface.NodeThreadMsg.NodeMsgType type = 1;
  void clear_type();
  ::nodeInterface::NodeThreadMsg_NodeMsgType type() const;
  void set_type(::nodeInterface::NodeThreadMsg_NodeMsgType value);
  private:
  ::nodeInterface::NodeThreadMsg_NodeMsgType _internal_type() const;
  void _internal_set_type(::nodeInterface::NodeThreadMsg_NodeMsgType value);
  public:

  // @@protoc_insertion_point(class_scope:nodeInterface.NodeThreadMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nodeInterface::Command > cmds_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > linkstatus_;
  mutable std::atomic<int> _linkstatus_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cmdrelay_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rcvdbytes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr datablock_;
  double timestamp_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nodeInterface_2eproto;
};
// -------------------------------------------------------------------

class MeshMsg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nodeInterface.MeshMsg) */ {
 public:
  inline MeshMsg() : MeshMsg(nullptr) {}
  ~MeshMsg() override;
  explicit constexpr MeshMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MeshMsg(const MeshMsg& from);
  MeshMsg(MeshMsg&& from) noexcept
    : MeshMsg() {
    *this = ::std::move(from);
  }

  inline MeshMsg& operator=(const MeshMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline MeshMsg& operator=(MeshMsg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MeshMsg& default_instance() {
    return *internal_default_instance();
  }
  static inline const MeshMsg* internal_default_instance() {
    return reinterpret_cast<const MeshMsg*>(
               &_MeshMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MeshMsg& a, MeshMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(MeshMsg* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MeshMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MeshMsg* New() const final {
    return new MeshMsg();
  }

  MeshMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MeshMsg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MeshMsg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MeshMsg& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MeshMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nodeInterface.MeshMsg";
  }
  protected:
  explicit MeshMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgBytesFieldNumber = 4,
    kMsgTypeFieldNumber = 1,
    kCmdIdFieldNumber = 2,
    kStatusFieldNumber = 3,
  };
  // bytes msgBytes = 4;
  void clear_msgbytes();
  const std::string& msgbytes() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msgbytes(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msgbytes();
  PROTOBUF_MUST_USE_RESULT std::string* release_msgbytes();
  void set_allocated_msgbytes(std::string* msgbytes);
  private:
  const std::string& _internal_msgbytes() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msgbytes(const std::string& value);
  std::string* _internal_mutable_msgbytes();
  public:

  // uint32 msgType = 1;
  void clear_msgtype();
  ::PROTOBUF_NAMESPACE_ID::uint32 msgtype() const;
  void set_msgtype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_msgtype() const;
  void _internal_set_msgtype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 cmdId = 2;
  void clear_cmdid();
  ::PROTOBUF_NAMESPACE_ID::uint32 cmdid() const;
  void set_cmdid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cmdid() const;
  void _internal_set_cmdid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 status = 3;
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::uint32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:nodeInterface.MeshMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msgbytes_;
  ::PROTOBUF_NAMESPACE_ID::uint32 msgtype_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cmdid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nodeInterface_2eproto;
};
// -------------------------------------------------------------------

class MeshMsgs final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nodeInterface.MeshMsgs) */ {
 public:
  inline MeshMsgs() : MeshMsgs(nullptr) {}
  ~MeshMsgs() override;
  explicit constexpr MeshMsgs(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MeshMsgs(const MeshMsgs& from);
  MeshMsgs(MeshMsgs&& from) noexcept
    : MeshMsgs() {
    *this = ::std::move(from);
  }

  inline MeshMsgs& operator=(const MeshMsgs& from) {
    CopyFrom(from);
    return *this;
  }
  inline MeshMsgs& operator=(MeshMsgs&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MeshMsgs& default_instance() {
    return *internal_default_instance();
  }
  static inline const MeshMsgs* internal_default_instance() {
    return reinterpret_cast<const MeshMsgs*>(
               &_MeshMsgs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(MeshMsgs& a, MeshMsgs& b) {
    a.Swap(&b);
  }
  inline void Swap(MeshMsgs* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MeshMsgs* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MeshMsgs* New() const final {
    return new MeshMsgs();
  }

  MeshMsgs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MeshMsgs>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MeshMsgs& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MeshMsgs& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MeshMsgs* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nodeInterface.MeshMsgs";
  }
  protected:
  explicit MeshMsgs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgsFieldNumber = 1,
  };
  // repeated .nodeInterface.MeshMsg msgs = 1;
  int msgs_size() const;
  private:
  int _internal_msgs_size() const;
  public:
  void clear_msgs();
  ::nodeInterface::MeshMsg* mutable_msgs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nodeInterface::MeshMsg >*
      mutable_msgs();
  private:
  const ::nodeInterface::MeshMsg& _internal_msgs(int index) const;
  ::nodeInterface::MeshMsg* _internal_add_msgs();
  public:
  const ::nodeInterface::MeshMsg& msgs(int index) const;
  ::nodeInterface::MeshMsg* add_msgs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nodeInterface::MeshMsg >&
      msgs() const;

  // @@protoc_insertion_point(class_scope:nodeInterface.MeshMsgs)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nodeInterface::MeshMsg > msgs_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nodeInterface_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Command

// float txInterval = 1;
inline void Command::clear_txinterval() {
  txinterval_ = 0;
}
inline float Command::_internal_txinterval() const {
  return txinterval_;
}
inline float Command::txinterval() const {
  // @@protoc_insertion_point(field_get:nodeInterface.Command.txInterval)
  return _internal_txinterval();
}
inline void Command::_internal_set_txinterval(float value) {
  
  txinterval_ = value;
}
inline void Command::set_txinterval(float value) {
  _internal_set_txinterval(value);
  // @@protoc_insertion_point(field_set:nodeInterface.Command.txInterval)
}

// bytes msgBytes = 2;
inline void Command::clear_msgbytes() {
  msgbytes_.ClearToEmpty();
}
inline const std::string& Command::msgbytes() const {
  // @@protoc_insertion_point(field_get:nodeInterface.Command.msgBytes)
  return _internal_msgbytes();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Command::set_msgbytes(ArgT0&& arg0, ArgT... args) {
 
 msgbytes_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:nodeInterface.Command.msgBytes)
}
inline std::string* Command::mutable_msgbytes() {
  std::string* _s = _internal_mutable_msgbytes();
  // @@protoc_insertion_point(field_mutable:nodeInterface.Command.msgBytes)
  return _s;
}
inline const std::string& Command::_internal_msgbytes() const {
  return msgbytes_.Get();
}
inline void Command::_internal_set_msgbytes(const std::string& value) {
  
  msgbytes_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Command::_internal_mutable_msgbytes() {
  
  return msgbytes_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Command::release_msgbytes() {
  // @@protoc_insertion_point(field_release:nodeInterface.Command.msgBytes)
  return msgbytes_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Command::set_allocated_msgbytes(std::string* msgbytes) {
  if (msgbytes != nullptr) {
    
  } else {
    
  }
  msgbytes_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msgbytes,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:nodeInterface.Command.msgBytes)
}

// uint32 cmdId = 3;
inline void Command::clear_cmdid() {
  cmdid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Command::_internal_cmdid() const {
  return cmdid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Command::cmdid() const {
  // @@protoc_insertion_point(field_get:nodeInterface.Command.cmdId)
  return _internal_cmdid();
}
inline void Command::_internal_set_cmdid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  cmdid_ = value;
}
inline void Command::set_cmdid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cmdid(value);
  // @@protoc_insertion_point(field_set:nodeInterface.Command.cmdId)
}

// uint32 destId = 4;
inline void Command::clear_destid() {
  destid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Command::_internal_destid() const {
  return destid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Command::destid() const {
  // @@protoc_insertion_point(field_get:nodeInterface.Command.destId)
  return _internal_destid();
}
inline void Command::_internal_set_destid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  destid_ = value;
}
inline void Command::set_destid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_destid(value);
  // @@protoc_insertion_point(field_set:nodeInterface.Command.destId)
}

// -------------------------------------------------------------------

// NodeThreadMsg

// .nodeInterface.NodeThreadMsg.NodeMsgType type = 1;
inline void NodeThreadMsg::clear_type() {
  type_ = 0;
}
inline ::nodeInterface::NodeThreadMsg_NodeMsgType NodeThreadMsg::_internal_type() const {
  return static_cast< ::nodeInterface::NodeThreadMsg_NodeMsgType >(type_);
}
inline ::nodeInterface::NodeThreadMsg_NodeMsgType NodeThreadMsg::type() const {
  // @@protoc_insertion_point(field_get:nodeInterface.NodeThreadMsg.type)
  return _internal_type();
}
inline void NodeThreadMsg::_internal_set_type(::nodeInterface::NodeThreadMsg_NodeMsgType value) {
  
  type_ = value;
}
inline void NodeThreadMsg::set_type(::nodeInterface::NodeThreadMsg_NodeMsgType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:nodeInterface.NodeThreadMsg.type)
}

// double timestamp = 2;
inline void NodeThreadMsg::clear_timestamp() {
  timestamp_ = 0;
}
inline double NodeThreadMsg::_internal_timestamp() const {
  return timestamp_;
}
inline double NodeThreadMsg::timestamp() const {
  // @@protoc_insertion_point(field_get:nodeInterface.NodeThreadMsg.timestamp)
  return _internal_timestamp();
}
inline void NodeThreadMsg::_internal_set_timestamp(double value) {
  
  timestamp_ = value;
}
inline void NodeThreadMsg::set_timestamp(double value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:nodeInterface.NodeThreadMsg.timestamp)
}

// bytes cmdRelay = 3;
inline void NodeThreadMsg::clear_cmdrelay() {
  cmdrelay_.ClearToEmpty();
}
inline const std::string& NodeThreadMsg::cmdrelay() const {
  // @@protoc_insertion_point(field_get:nodeInterface.NodeThreadMsg.cmdRelay)
  return _internal_cmdrelay();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NodeThreadMsg::set_cmdrelay(ArgT0&& arg0, ArgT... args) {
 
 cmdrelay_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:nodeInterface.NodeThreadMsg.cmdRelay)
}
inline std::string* NodeThreadMsg::mutable_cmdrelay() {
  std::string* _s = _internal_mutable_cmdrelay();
  // @@protoc_insertion_point(field_mutable:nodeInterface.NodeThreadMsg.cmdRelay)
  return _s;
}
inline const std::string& NodeThreadMsg::_internal_cmdrelay() const {
  return cmdrelay_.Get();
}
inline void NodeThreadMsg::_internal_set_cmdrelay(const std::string& value) {
  
  cmdrelay_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* NodeThreadMsg::_internal_mutable_cmdrelay() {
  
  return cmdrelay_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* NodeThreadMsg::release_cmdrelay() {
  // @@protoc_insertion_point(field_release:nodeInterface.NodeThreadMsg.cmdRelay)
  return cmdrelay_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void NodeThreadMsg::set_allocated_cmdrelay(std::string* cmdrelay) {
  if (cmdrelay != nullptr) {
    
  } else {
    
  }
  cmdrelay_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cmdrelay,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:nodeInterface.NodeThreadMsg.cmdRelay)
}

// repeated .nodeInterface.Command cmds = 4;
inline int NodeThreadMsg::_internal_cmds_size() const {
  return cmds_.size();
}
inline int NodeThreadMsg::cmds_size() const {
  return _internal_cmds_size();
}
inline void NodeThreadMsg::clear_cmds() {
  cmds_.Clear();
}
inline ::nodeInterface::Command* NodeThreadMsg::mutable_cmds(int index) {
  // @@protoc_insertion_point(field_mutable:nodeInterface.NodeThreadMsg.cmds)
  return cmds_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nodeInterface::Command >*
NodeThreadMsg::mutable_cmds() {
  // @@protoc_insertion_point(field_mutable_list:nodeInterface.NodeThreadMsg.cmds)
  return &cmds_;
}
inline const ::nodeInterface::Command& NodeThreadMsg::_internal_cmds(int index) const {
  return cmds_.Get(index);
}
inline const ::nodeInterface::Command& NodeThreadMsg::cmds(int index) const {
  // @@protoc_insertion_point(field_get:nodeInterface.NodeThreadMsg.cmds)
  return _internal_cmds(index);
}
inline ::nodeInterface::Command* NodeThreadMsg::_internal_add_cmds() {
  return cmds_.Add();
}
inline ::nodeInterface::Command* NodeThreadMsg::add_cmds() {
  ::nodeInterface::Command* _add = _internal_add_cmds();
  // @@protoc_insertion_point(field_add:nodeInterface.NodeThreadMsg.cmds)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nodeInterface::Command >&
NodeThreadMsg::cmds() const {
  // @@protoc_insertion_point(field_list:nodeInterface.NodeThreadMsg.cmds)
  return cmds_;
}

// repeated uint32 linkStatus = 5;
inline int NodeThreadMsg::_internal_linkstatus_size() const {
  return linkstatus_.size();
}
inline int NodeThreadMsg::linkstatus_size() const {
  return _internal_linkstatus_size();
}
inline void NodeThreadMsg::clear_linkstatus() {
  linkstatus_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NodeThreadMsg::_internal_linkstatus(int index) const {
  return linkstatus_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NodeThreadMsg::linkstatus(int index) const {
  // @@protoc_insertion_point(field_get:nodeInterface.NodeThreadMsg.linkStatus)
  return _internal_linkstatus(index);
}
inline void NodeThreadMsg::set_linkstatus(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  linkstatus_.Set(index, value);
  // @@protoc_insertion_point(field_set:nodeInterface.NodeThreadMsg.linkStatus)
}
inline void NodeThreadMsg::_internal_add_linkstatus(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  linkstatus_.Add(value);
}
inline void NodeThreadMsg::add_linkstatus(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_linkstatus(value);
  // @@protoc_insertion_point(field_add:nodeInterface.NodeThreadMsg.linkStatus)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
NodeThreadMsg::_internal_linkstatus() const {
  return linkstatus_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
NodeThreadMsg::linkstatus() const {
  // @@protoc_insertion_point(field_list:nodeInterface.NodeThreadMsg.linkStatus)
  return _internal_linkstatus();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
NodeThreadMsg::_internal_mutable_linkstatus() {
  return &linkstatus_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
NodeThreadMsg::mutable_linkstatus() {
  // @@protoc_insertion_point(field_mutable_list:nodeInterface.NodeThreadMsg.linkStatus)
  return _internal_mutable_linkstatus();
}

// bytes rcvdBytes = 6;
inline void NodeThreadMsg::clear_rcvdbytes() {
  rcvdbytes_.ClearToEmpty();
}
inline const std::string& NodeThreadMsg::rcvdbytes() const {
  // @@protoc_insertion_point(field_get:nodeInterface.NodeThreadMsg.rcvdBytes)
  return _internal_rcvdbytes();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NodeThreadMsg::set_rcvdbytes(ArgT0&& arg0, ArgT... args) {
 
 rcvdbytes_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:nodeInterface.NodeThreadMsg.rcvdBytes)
}
inline std::string* NodeThreadMsg::mutable_rcvdbytes() {
  std::string* _s = _internal_mutable_rcvdbytes();
  // @@protoc_insertion_point(field_mutable:nodeInterface.NodeThreadMsg.rcvdBytes)
  return _s;
}
inline const std::string& NodeThreadMsg::_internal_rcvdbytes() const {
  return rcvdbytes_.Get();
}
inline void NodeThreadMsg::_internal_set_rcvdbytes(const std::string& value) {
  
  rcvdbytes_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* NodeThreadMsg::_internal_mutable_rcvdbytes() {
  
  return rcvdbytes_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* NodeThreadMsg::release_rcvdbytes() {
  // @@protoc_insertion_point(field_release:nodeInterface.NodeThreadMsg.rcvdBytes)
  return rcvdbytes_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void NodeThreadMsg::set_allocated_rcvdbytes(std::string* rcvdbytes) {
  if (rcvdbytes != nullptr) {
    
  } else {
    
  }
  rcvdbytes_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rcvdbytes,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:nodeInterface.NodeThreadMsg.rcvdBytes)
}

// bytes dataBlock = 7;
inline void NodeThreadMsg::clear_datablock() {
  datablock_.ClearToEmpty();
}
inline const std::string& NodeThreadMsg::datablock() const {
  // @@protoc_insertion_point(field_get:nodeInterface.NodeThreadMsg.dataBlock)
  return _internal_datablock();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NodeThreadMsg::set_datablock(ArgT0&& arg0, ArgT... args) {
 
 datablock_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:nodeInterface.NodeThreadMsg.dataBlock)
}
inline std::string* NodeThreadMsg::mutable_datablock() {
  std::string* _s = _internal_mutable_datablock();
  // @@protoc_insertion_point(field_mutable:nodeInterface.NodeThreadMsg.dataBlock)
  return _s;
}
inline const std::string& NodeThreadMsg::_internal_datablock() const {
  return datablock_.Get();
}
inline void NodeThreadMsg::_internal_set_datablock(const std::string& value) {
  
  datablock_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* NodeThreadMsg::_internal_mutable_datablock() {
  
  return datablock_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* NodeThreadMsg::release_datablock() {
  // @@protoc_insertion_point(field_release:nodeInterface.NodeThreadMsg.dataBlock)
  return datablock_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void NodeThreadMsg::set_allocated_datablock(std::string* datablock) {
  if (datablock != nullptr) {
    
  } else {
    
  }
  datablock_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), datablock,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:nodeInterface.NodeThreadMsg.dataBlock)
}

// -------------------------------------------------------------------

// MeshMsg

// uint32 msgType = 1;
inline void MeshMsg::clear_msgtype() {
  msgtype_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MeshMsg::_internal_msgtype() const {
  return msgtype_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MeshMsg::msgtype() const {
  // @@protoc_insertion_point(field_get:nodeInterface.MeshMsg.msgType)
  return _internal_msgtype();
}
inline void MeshMsg::_internal_set_msgtype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  msgtype_ = value;
}
inline void MeshMsg::set_msgtype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_msgtype(value);
  // @@protoc_insertion_point(field_set:nodeInterface.MeshMsg.msgType)
}

// uint32 cmdId = 2;
inline void MeshMsg::clear_cmdid() {
  cmdid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MeshMsg::_internal_cmdid() const {
  return cmdid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MeshMsg::cmdid() const {
  // @@protoc_insertion_point(field_get:nodeInterface.MeshMsg.cmdId)
  return _internal_cmdid();
}
inline void MeshMsg::_internal_set_cmdid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  cmdid_ = value;
}
inline void MeshMsg::set_cmdid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cmdid(value);
  // @@protoc_insertion_point(field_set:nodeInterface.MeshMsg.cmdId)
}

// uint32 status = 3;
inline void MeshMsg::clear_status() {
  status_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MeshMsg::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MeshMsg::status() const {
  // @@protoc_insertion_point(field_get:nodeInterface.MeshMsg.status)
  return _internal_status();
}
inline void MeshMsg::_internal_set_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  status_ = value;
}
inline void MeshMsg::set_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:nodeInterface.MeshMsg.status)
}

// bytes msgBytes = 4;
inline void MeshMsg::clear_msgbytes() {
  msgbytes_.ClearToEmpty();
}
inline const std::string& MeshMsg::msgbytes() const {
  // @@protoc_insertion_point(field_get:nodeInterface.MeshMsg.msgBytes)
  return _internal_msgbytes();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MeshMsg::set_msgbytes(ArgT0&& arg0, ArgT... args) {
 
 msgbytes_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:nodeInterface.MeshMsg.msgBytes)
}
inline std::string* MeshMsg::mutable_msgbytes() {
  std::string* _s = _internal_mutable_msgbytes();
  // @@protoc_insertion_point(field_mutable:nodeInterface.MeshMsg.msgBytes)
  return _s;
}
inline const std::string& MeshMsg::_internal_msgbytes() const {
  return msgbytes_.Get();
}
inline void MeshMsg::_internal_set_msgbytes(const std::string& value) {
  
  msgbytes_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MeshMsg::_internal_mutable_msgbytes() {
  
  return msgbytes_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MeshMsg::release_msgbytes() {
  // @@protoc_insertion_point(field_release:nodeInterface.MeshMsg.msgBytes)
  return msgbytes_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void MeshMsg::set_allocated_msgbytes(std::string* msgbytes) {
  if (msgbytes != nullptr) {
    
  } else {
    
  }
  msgbytes_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msgbytes,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:nodeInterface.MeshMsg.msgBytes)
}

// -------------------------------------------------------------------

// MeshMsgs

// repeated .nodeInterface.MeshMsg msgs = 1;
inline int MeshMsgs::_internal_msgs_size() const {
  return msgs_.size();
}
inline int MeshMsgs::msgs_size() const {
  return _internal_msgs_size();
}
inline void MeshMsgs::clear_msgs() {
  msgs_.Clear();
}
inline ::nodeInterface::MeshMsg* MeshMsgs::mutable_msgs(int index) {
  // @@protoc_insertion_point(field_mutable:nodeInterface.MeshMsgs.msgs)
  return msgs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nodeInterface::MeshMsg >*
MeshMsgs::mutable_msgs() {
  // @@protoc_insertion_point(field_mutable_list:nodeInterface.MeshMsgs.msgs)
  return &msgs_;
}
inline const ::nodeInterface::MeshMsg& MeshMsgs::_internal_msgs(int index) const {
  return msgs_.Get(index);
}
inline const ::nodeInterface::MeshMsg& MeshMsgs::msgs(int index) const {
  // @@protoc_insertion_point(field_get:nodeInterface.MeshMsgs.msgs)
  return _internal_msgs(index);
}
inline ::nodeInterface::MeshMsg* MeshMsgs::_internal_add_msgs() {
  return msgs_.Add();
}
inline ::nodeInterface::MeshMsg* MeshMsgs::add_msgs() {
  ::nodeInterface::MeshMsg* _add = _internal_add_msgs();
  // @@protoc_insertion_point(field_add:nodeInterface.MeshMsgs.msgs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nodeInterface::MeshMsg >&
MeshMsgs::msgs() const {
  // @@protoc_insertion_point(field_list:nodeInterface.MeshMsgs.msgs)
  return msgs_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace nodeInterface

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::nodeInterface::NodeThreadMsg_NodeMsgType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::nodeInterface::NodeThreadMsg_NodeMsgType>() {
  return ::nodeInterface::NodeThreadMsg_NodeMsgType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_nodeInterface_2eproto
